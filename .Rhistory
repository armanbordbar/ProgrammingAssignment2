c <- 4
class(c)
R.version.string
install.packages("swirl")
library(swirl)
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0,10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
swirl()
1:20
pi:10
15:1
?":"
seq(1,20)
seq(0, 10, by = 0.5)
my_seq <- seq(5, 10, length = 30)
length(my_seq)
1:length(my_seq)
seq(along = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char, "Arman")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep ="-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y,z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na()]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect) <- c("foo", "bar", "norf")
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
savehistory("~/Desktop/swrl_course.Rhistory")
makeCacheMatrix <- function(x = matrix()) {
inv <- matrix()
set <- function(mat){
mat <<- x
inv <<- matrix()
}
get <- function() mat
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
Cmatrix <- matrix(c(set, get, setInverse, getInverse))
Cmatrix
}
q <- makeCacheMatrix(matrix(1:4, ncol = 2, nrow = 2))
q
matrix(c(mean(), matrix(), vector(), sqrt()), ncol = 2, nrow = 2)
matrix(c(numeric(), matrix(), vector(), sqrt()), ncol = 2, nrow = 2)
matrix(c(numeric(), matrix(), vector(), vector(), ncol = 2, nrow = 2)
)
matrix(c(numeric(), matrix(), vector(), vector()), ncol = 2, nrow = 2)
makeCacheMatrix <- function(x = matrix()) {
inv <- matrix()
set <- function(){
mat <<- x
inv <<- matrix()
}
get <- function() mat
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
Cmatrix <- matrix(c(set, get, setInverse, getInverse))
Cmatrix
}
m <- makeCacheMatrix(matrix(1:4, ncol = 2, nrow = 2))
m
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
m <- makeVector(1:4)
m
makeCacheMatrix <- function(x = matrix()) {
inv <- matrix()
set <- function(){
mat <<- x
inv <<- matrix()
}
get <- function() mat
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
Cvec = list(set, get, setInverse, getInverse)
Cmatrix <- matrix(Cvec)
Cmatrix
}
m <- makeCacheMatrix(matrix(1:4))
m
makeCacheMatrix <- function(x = matrix()) {
inv <- matrix()
set <- function(){
mat <<- x
inv <<- matrix()
}
get <- function() mat
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
Cvec = matrix(list(set, get, setInverse, getInverse))
Cmatrix <- matrix(Cvec)
Cmatrix
}
m <- makeCacheMatrix(matrix(1:4))
m
m <- makeCacheMatrix(matrix(1:4, ncol = 2, nrow = 2))
m
makeCacheMatrix <- function(x = matrix()) {
inv <- matrix()
set <- function(){
mat <<- x
inv <<- matrix()
}
get <- function() mat
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
Cvec = matrix(list(set=set, get=get, setInverse = setInverse, getInverse = getInverse))
Cmatrix <- matrix(Cvec, ncol = 2, nrow = 2)
Cmatrix
}
m <- makeCacheMatrix(matrix(1:4, ncol = 2, nrow = 2))
m
makeCacheMatrix <- function(x = matrix()) {
inv <- matrix()
set <- function(){
mat <<- x
inv <<- matrix()
}
get <- function() mat
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
Cvec = list(set=set, get=get, setInverse = setInverse, getInverse = getInverse))
Cvec
#Cmatrix <- matrix(Cvec, ncol = 2, nrow = 2)
#Cmatrix
}
makeCacheMatrix <- function(x = matrix()) {
inv <- matrix()
set <- function(){
mat <<- x
inv <<- matrix()
}
get <- function() mat
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
Cvec = list(set=set, get=get, setInverse = setInverse, getInverse = getInverse))
Cvec
#Cmatrix <- matrix(Cvec, ncol = 2, nrow = 2)
#Cmatrix
}
makeCacheMatrix <- function(x = matrix()) {
inv <- matrix()
set <- function(){
mat <<- x
inv <<- matrix()
}
get <- function() mat
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
Cvec = list(set=set, get=get, setInverse = setInverse, getInverse = getInverse)
Cvec
#Cmatrix <- matrix(Cvec, ncol = 2, nrow = 2)
#Cmatrix
}
m <- makeCacheMatrix(matrix(1:4, ncol = 2, nrow = 2))
m
makeCacheMatrix <- function(x = matrix()) {
inv <- matrix()
set <- function(){
mat <<- x
inv <<- matrix()
}
get <- function() mat
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
Cvec = matrix(c(set=set, get=get, setInverse = setInverse, getInverse = getInverse), nrow = 2, ncol = 2))
Cvec
}
makeCacheMatrix <- function(x = matrix()) {
inv <- matrix()
set <- function(){
mat <<- x
inv <<- matrix()
}
get <- function() mat
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
Cvec = matrix(c(set=set, get=get, setInverse = setInverse, getInverse = getInverse), nrow = 2, ncol = 2)
Cvec
}
m <- makeCacheMatrix(matrix(1:4, ncol = 2, nrow = 2))
m
set <- function(x){
mat <<- x
inv <<- matrix()
}
a <- set(1:4)
a
set <- function(x){
mat <<- x
inv <<- matrix()
}
set <- function(x){
mat <<- x
inv <<- matrix()
mat
}
a <- set(1:4)
a
makeCacheMatrix <- function(x = matrix()) {
inv <- matrix()
setMatrix <- function(x){
inv << - matrix()
matrix <<- x
}
getMatrix <- function() matrix
mat <- getMatrix()
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
invrs <- getInverse()
cacheMat <- matrix(c(mat, invrs))
cacheMat
}
makeCacheMatrix <- function(x = matrix()) {
inv <- matrix()
setMatrix <- function(x){
inv << - matrix()
matrix <<- x
}
getMatrix <- function() matrix
mat <- getMatrix()
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
invrs <- getInverse()
cacheMat <- matrix(c(mat, invrs))
cacheMat
}
makeCacheMatrix <- function(x = matrix()) {
inv <- matrix()
setMatrix <- function(x){
inv << - matrix()
matrix <<- x
}
getMatrix <- function() matrix
mat <- getMatrix()
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
invrs <- getInverse()
cacheMat <- matrix(c(mat, invrs))
cacheMat
}
makeCacheMatrix <- function(x = matrix()) {
inv <- matrix()
setMatrix <- function(x){
inv <<- matrix()
matrix <<- x
}
getMatrix <- function() matrix
mat <- getMatrix()
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
invrs <- getInverse()
cacheMat <- matrix(c(mat, invrs))
cacheMat
}
m <- makeCacheMatrix(matrix(1:4, ncol = 2, nrow = 2))
m
name(m)
names(m)
c <- matrix(1:4)
getMatrix <- function() c
a <- getMatrix()
a
m <- makeCacheMatrix(matrix())
m
makeCacheMatrix <- function(x = matrix()) {
inv <- matrix()
mat <<- x
#setMatrix <- function(x){
#       inv <<- matrix()
#      matrix <<- x
#}
#getMatrix <- function() matrix
#mat <- getMatrix()
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
invrs <- getInverse()
cacheMat <- matrix(c(mat, invrs))
cacheMat
}
m <- makeCacheMatrix(matrix())
m
makeCacheMatrix <- function(x = matrix()) {
inv <- matrix()
setMatrix <- function(){
inv <<- matrix()
matrix <<- x
}
getMatrix <- function() matrix
mat <- getMatrix()
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
invrs <- getInverse()
cacheMat <- matrix(c(mat, invrs))
cacheMat
}
m <- makeCacheMatrix(matrix())
m
makeCacheMatrix <- function(x = matrix()) {
inv <- matrix()
mat <<- x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
invrs <- getInverse()
cacheMat <- matrix(c(mat, invrs))
}
makeCacheMatrix <- function(x = matrix()) {
inv <- matrix()
mat <<- x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
invrs <- getInverse()
cacheMat <- matrix(c(mat, invrs))
cacheMat
}
m <- makeCacheMatrix(matrix())
m
m <- makeCacheMatrix(matrix(1:4, ncol = 2, nrow = 2))
m
m[[1]]
m[[2]]
m <- makeCacheMatrix(matrix(1:4, ncol = 2, nrow = 2))
makeCacheMatrix <- function(x = matrix()) {
inv <- matrix()
mat <<- x
setInverse <- function(inverse) inv <<- inverse
getInverse <- function() inv
invrs <- getInverse()
cacheMat <- matrix(c(mat, invrs))
cacheMat
}
m <- makeCacheMatrix(matrix(1:4, ncol = 2, nrow = 2))
m
a <- matrix(1:4, ncol=2, nrow=2)
b <- matrix(1:4, ncol=2, nrow=2)
c <- matrix(c(a,b))
c
c <- matrix(c(a,b), ncol = 2, nrow = 2)
c
c <- matrix(c(a,b), ncol = 2)
c
a
b
c <- matrix(c(a,b), ncol = 4, nrow = 2)
c
source(cachematrix.R)
setwd("~/ProgrammingAssignment2")
source(cachematrix.R)
setwd("~/ProgrammingAssignment2")
source(cachematrix.R)
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
source(cachematrix.R)
source('~/ProgrammingAssignment2/cachematrix.R')
setwd("~/ProgrammingAssignment2")
source(~/cachematrix.R)
source('cachematrix.R')
m <- matrix(1:4, ncol = 2, nrow = 2)
q <- makeCacheMatrix(m)
q
z <- cacheSolve(q)
source('~/ProgrammingAssignment2/cachematrix.R')
q <- makeCacheMatrix(m)
q
z <- cacheSolve(q)
source('~/ProgrammingAssignment2/cachematrix.R')
q <- makeCacheMatrix(m)
q
z <- cacheSolve(q)
h
z <- ncol(m) * nrow(m)
l <- length(q)
d <- l-z
h <- x[l-z, 1]
d
l
source('~/ProgrammingAssignment2/cachematrix.R')
m <- matrix(1:4, ncol = 2, nrow = 2)
q <- makeCacheMatrix(m)
z <- cacheSolve(q)
z <- ncol(m) * nrow(m)
l <- length(q)
d <- l-z
h <- x[l-d, ]
z <- ncol(m) * nrow(m)
l <- length(q)
d <- l-z
h <- x[l-d, 1]
z
l
d
z <- ncol(m) * nrow(m)
l <- length(q)
d <- l-z
h <- q[l-d, ]
h
source('~/ProgrammingAssignment2/cachematrix.R')
m <- matrix(1:4, ncol = 2, nrow = 2)
q <- makeCacheMatrix(m)
z <- cacheSolve(q)
z
a <- makeCacheMatrix.setInverse(matrix(1:4))
source('~/ProgrammingAssignment2/cachematrix.R')
source('~/ProgrammingAssignment2/cachematrix.R')
